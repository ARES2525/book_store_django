pipeline {
    agent any

    environment {
        COMPOSE_PROJECT_NAME = "bookstore_project"
        COMPOSE_FILE = "bookstore_project/docker-compose.yml"
        DJANGO_SERVICE = "bookstore_website"
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "‚úÖ Code checked out from GitHub"
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker image..."
                bat "docker-compose -f %COMPOSE_FILE% -p %COMPOSE_PROJECT_NAME% build"
            }
        }

        stage('Run Unit Tests') {
            steps {
                echo "üß™ Running Django unit tests..."
                bat "docker-compose -f %COMPOSE_FILE% -p %COMPOSE_PROJECT_NAME% run --rm %DJANGO_SERVICE% python manage.py test"
            }
        }

        stage('Apply Migrations') {
            steps {
                echo "üõ†Ô∏è Applying migrations..."
                bat "docker-compose -f %COMPOSE_FILE% -p %COMPOSE_PROJECT_NAME% run --rm %DJANGO_SERVICE% python manage.py makemigrations"
                bat "docker-compose -f %COMPOSE_FILE% -p %COMPOSE_PROJECT_NAME% run --rm %DJANGO_SERVICE% python manage.py migrate"
            }
        }

        stage('Collect Static Files') {
            steps {
                echo "üì¶ Collecting static files..."
                bat "docker-compose -f %COMPOSE_FILE% -p %COMPOSE_PROJECT_NAME% run --rm %DJANGO_SERVICE% python manage.py collectstatic --noinput"
            }
        }

        stage('Deploy App') {
            steps {
                echo "üöÄ Deploying app..."
                bat "docker-compose -f %COMPOSE_FILE% -p %COMPOSE_PROJECT_NAME% up -d"
            }
        }
    }

    post {
        success {
            echo '‚úÖ CI/CD pipeline completed successfully!'
        }
        failure {
            echo '‚ùå CI/CD pipeline failed. Please check the logs above.'
        }
    }
}
