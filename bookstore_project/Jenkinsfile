pipeline {
    agent any

    environment {
        COMPOSE_PROJECT_NAME = "bookstore_project"
    }

    stages {
        stage('Checkout Code') {
            steps {
                // If you're setting the repo in Jenkins, this is handled automatically.
                echo '‚úÖ Code checked out from GitHub'
            }
        }

       stage('Build Docker Image') {
           steps {
                bat 'docker-compose -f bookstore_project/docker-compose.yml -p bookstore_project build'
            }
        }


        stage('Run Unit Tests') {
            steps {
                echo 'üß™ Running Django tests...'
                bat 'docker-compose -p %COMPOSE_PROJECT_NAME% run --rm web python manage.py test'
            }
        }

        stage('Deploy App') {
            steps {
                echo 'üöÄ Deploying the Django app...'
                bat 'docker-compose -p %COMPOSE_PROJECT_NAME% up -d'
            }
        }

        stage('Apply Migrations') {
            steps {
                bat 'docker-compose -p %COMPOSE_PROJECT_NAME% exec web python manage.py migrate'
            }
        }

        stage('Collect Static Files') {
            steps {
                bat 'docker-compose -p %COMPOSE_PROJECT_NAME% exec web python manage.py collectstatic --noinput'
            }
        }
    }

    post {
        success {
            echo '‚úÖ CI/CD pipeline completed successfully!'
        }
        failure {
            echo '‚ùå CI/CD pipeline failed. Please check the logs above.'
        }
    }
}
